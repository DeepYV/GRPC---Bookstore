// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bookstore/bookstore_pb (interfaces: BookstoreClient)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	bookstore_pb "github.com/bookstore/bookstore_pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBookstoreClient is a mock of BookstoreClient interface.
type MockBookstoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookstoreClientMockRecorder
}

// MockBookstoreClientMockRecorder is the mock recorder for MockBookstoreClient.
type MockBookstoreClientMockRecorder struct {
	mock *MockBookstoreClient
}

// NewMockBookstoreClient creates a new mock instance.
func NewMockBookstoreClient(ctrl *gomock.Controller) *MockBookstoreClient {
	mock := &MockBookstoreClient{ctrl: ctrl}
	mock.recorder = &MockBookstoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookstoreClient) EXPECT() *MockBookstoreClientMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookstoreClient) CreateBook(arg0 context.Context, arg1 *bookstore_pb.BooksRequest, arg2 ...grpc.CallOption) (*bookstore_pb.Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBook", varargs...)
	ret0, _ := ret[0].(*bookstore_pb.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookstoreClientMockRecorder) CreateBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookstoreClient)(nil).CreateBook), varargs...)
}

// DeleteBook mocks base method.
func (m *MockBookstoreClient) DeleteBook(arg0 context.Context, arg1 *bookstore_pb.Id, arg2 ...grpc.CallOption) (*bookstore_pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBook", varargs...)
	ret0, _ := ret[0].(*bookstore_pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookstoreClientMockRecorder) DeleteBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookstoreClient)(nil).DeleteBook), varargs...)
}

// GetBook mocks base method.
func (m *MockBookstoreClient) GetBook(arg0 context.Context, arg1 *bookstore_pb.Id, arg2 ...grpc.CallOption) (*bookstore_pb.Book, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBook", varargs...)
	ret0, _ := ret[0].(*bookstore_pb.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookstoreClientMockRecorder) GetBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookstoreClient)(nil).GetBook), varargs...)
}

// GetBookdetails mocks base method.
func (m *MockBookstoreClient) GetBookdetails(arg0 context.Context, arg1 ...grpc.CallOption) (bookstore_pb.Bookstore_GetBookdetailsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookdetails", varargs...)
	ret0, _ := ret[0].(bookstore_pb.Bookstore_GetBookdetailsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookdetails indicates an expected call of GetBookdetails.
func (mr *MockBookstoreClientMockRecorder) GetBookdetails(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookdetails", reflect.TypeOf((*MockBookstoreClient)(nil).GetBookdetails), varargs...)
}

// GetContent mocks base method.
func (m *MockBookstoreClient) GetContent(arg0 context.Context, arg1 *bookstore_pb.PageRequest, arg2 ...grpc.CallOption) (bookstore_pb.Bookstore_GetContentClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContent", varargs...)
	ret0, _ := ret[0].(bookstore_pb.Bookstore_GetContentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockBookstoreClientMockRecorder) GetContent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockBookstoreClient)(nil).GetContent), varargs...)
}

// Upatebook mocks base method.
func (m *MockBookstoreClient) Upatebook(arg0 context.Context, arg1 *bookstore_pb.UpdateBookRequest, arg2 ...grpc.CallOption) (*bookstore_pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upatebook", varargs...)
	ret0, _ := ret[0].(*bookstore_pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upatebook indicates an expected call of Upatebook.
func (mr *MockBookstoreClientMockRecorder) Upatebook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upatebook", reflect.TypeOf((*MockBookstoreClient)(nil).Upatebook), varargs...)
}
